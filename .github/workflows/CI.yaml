name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  ejs-be-build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm exec prisma generate

      - name: Build
        run: pnpm build

      - name: Cache dist
        uses: actions/cache@v3
        with:
          path: ./*/dist
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-${{ github.sha }}

  ejs-be-lint:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Check style
        run: pnpm format:check

  ejs-be-test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18]

    services:
      postgres:
        image: postgres:14-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: skku-ejs

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm exec prisma generate

      - name: Check Prisma Migration
        env:
          DATABASE_URL: postgresql://postgres:1234@127.0.0.1:5432/skku-ejs?schema=public
        run: |
          pnpm exec prisma migrate diff \
            --from-migrations ./prisma/migrations \
            --to-schema-datamodel ./prisma/schema.prisma \
            --shadow-database-url postgresql://postgres:1234@127.0.0.1:5432/skku-ejs?schema=public \
            --exit-code \
            && pnpm exec prisma migrate reset -f

      - name: Check types in Typescript
        run: pnpm exec tsc --noEmit

      - name: Test
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:1234@localhost:5432/skku-ejs?schema=public

  # cmake-ejs-t:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build Environment
  #       # Build your program with the given configuration
  #       run: cmake -E make_directory build
  #       working-directory: ${{github.workspace}}/C/ejs-t

  #     - name: Install ninja-build tool
  #       uses: seanmiddleditch/gha-setup-ninja@v3

  #     - name: Install Clang
  #       uses: egor-tensin/setup-clang@v1.4

  #     - name: Build
  #       working-directory: ${{github.workspace}}/C/ejs-t/build
  #       # Execute tests defined by the CMake configuration.
  #       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #       run: cmake -DCMAKE_C_COMPILER=clang -GNinja .. && cmake --build . --config release --parallel 2 --clean-first

  #     # - name: test
  #     #   working-directory: ${{github.workspace}}/C/ejs-t/build
  #     #   run: ctest --parallel 2

  # cmake-ejs-s:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build Environment
  #       # Build your program with the given configuration
  #       run: cmake -E make_directory build
  #       working-directory: ${{github.workspace}}/C/ejs-s

  #     - name: Install ninja-build tool
  #       uses: seanmiddleditch/gha-setup-ninja@v3

  #     - name: Install Clang
  #       uses: egor-tensin/setup-clang@v1.4

  #     - name: Build
  #       working-directory: ${{github.workspace}}/C/ejs-s/build
  #       # Execute tests defined by the CMake configuration.
  #       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #       run: cmake -DCMAKE_C_COMPILER=clang -GNinja .. && cmake --build . --config release --parallel 2 --clean-first

  #     - name: test
  #       working-directory: ${{github.workspace}}/C/ejs-s/build
  #       run: ctest --parallel 2
