// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Tutor
  Student
}

enum TestcaseType {
  OPENED
  HIDDEN
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  nickname String @unique @db.VarChar(255)
  role     Role
  otpKey   Int    @default(0)

  score        Score[]
  UserGroup    UserRepo[]
  UserTestCase UserTestCase[]
}

model Repo {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  Problem  Problem[]
  UserRepo UserRepo[]
  TestCase TestCase[]
}

model UserRepo {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  repo   Repo @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId Int

  @@unique([userId, repoId])
}

model Score {
  id        Int      @id @default(autoincrement())
  score     Int
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
}

model Problem {
  id       Int        @id @default(autoincrement())
  title    String     @db.VarChar(255)
  text     String     @db.Text
  uuid     String     @default("null") @db.VarChar(255)
  score    Score[]
  testCase TestCase[]
  Repo     Repo       @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId   Int
}

model TestCase {
  id           Int            @id @default(autoincrement())
  input        String         @db.Text
  output       String         @db.Text
  isHidden     TestcaseType
  Repo         Repo           @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId       Int
  Problem      Problem        @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    Int
  UserTestCase UserTestCase[]
}

model UserTestCase {
  id         Int      @id @default(autoincrement())
  isCorrect  Boolean?
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  TestCase   TestCase @relation(fields: [testCaseId], references: [id])
  testCaseId Int
}
